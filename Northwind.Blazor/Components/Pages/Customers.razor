@page "/customers/{country?}"
@attribute [StreamRendering(true)]
@inject INorthwindService _service
<h3>
	Customers @(string.IsNullOrWhiteSpace(Country) ? "Worldwide" : "in " + Country)
</h3>
<div class="form-group">
	<a class="btn btn-info" href="createcustomer">
		<i class="bi bi-plus-square"></i> Create New
	</a>
</div>
@if (customers is null)
{
	<p><em>Loading...</em></p>
}
else
{
	<table class="table">
		<thead>
			<tr>
				<th>Id</th>
				<th>Company Name</th>
				<th>Address</th>
				<th>Phone</th>
				<th></th>
			</tr>
		</thead>
		<tbody>
			@foreach (Customer c in customers)
			{
				<tr>
					<td>@c.CustomerId</td>
					<td>@c.CompanyName</td>
					<td>
						@c.Address<br />
						@c.City<br />
						@c.PostalCode<br />
						@c.Country
					</td>
					<td>@c.Phone</td>
					<td>
						<a class="btn btn-info" href="editcustomer/@c.CustomerId">
							<i class="bi bi-pencil"></i>
						</a>
						<a class="btn btn-danger"
						   href="deletecustomer/@c.CustomerId">
							<i class="bi bi-trash"></i>
						</a>
					</td>
				</tr>
			}
		</tbody>
	</table>
}
@code {
	[Parameter]
	public string? Country { get; set; }

	private IEnumerable<Customer>? customers;

	protected override async Task OnParametersSetAsync()
	{
		await Task.Delay(1000); // Delay for one second.

		if (string.IsNullOrWhiteSpace(Country))
		{
			customers = await _service.GetCustomersAsync();
		}
		else
		{
			customers = await _service.GetCustomersAsync(Country);
		}
	}
}
